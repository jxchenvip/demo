{"version":3,"sources":["webpack:///0.build.js","webpack:///Canvas2d.vue","webpack:///./src/assets/source.png","webpack:///./src/components/Canvas2d.vue?8aaf","webpack:///./src/components/Canvas2d.vue"],"names":["webpackJsonp","41","module","exports","__webpack_require__","name","data","51","p","52","render","_vm","this","_m","staticRenderFns","_h","staticClass","attrs","src","height","width","8","__vue_exports__","__vue_options__","__vue_template__","default","options"],"mappings":"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","file":"0.build.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 41:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ exports[\"default\"] = {\n    name: 'canvas2d',\n    data: function data() {\n        return {};\n    }\n};\n\n/***/ },\n\n/***/ 51:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"source.png?0cb2e095990b9c8a7ff839d32f2bdb17\";\n\n/***/ },\n\n/***/ 52:\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports={render:function (){var _vm=this;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;\n  return _vm._h('div', {\n    staticClass: \"api\"\n  }, [_vm._h('h2', [\"Canvas2D API\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Canvas2D API\"]), \" \", _vm._h('p', [\"Canvas is a part of the new HTML5 specification for next generation web technologies. The HTML5 canvas is an HTML tag that you can embed inside an HTML document for the purpose of drawing graphics with JavaScript. Since the HTML5 canvas is a bitmap, every pixel drawn onto the canvas overrides pixels beneath it.\"])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"The Canvas tag\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\t\\t<canvas id=\\\"canvas\\\" width=\\\"578\\\" height=\\\"200\\\"></canvas>\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Context\"]), \" \", _vm._h('p', [\"<canvas> creates a fixed size drawing surface that exposes one or more rendering contexts, which are used to create and manipulate the content shown. We'll focus on the 2D rendering context.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tvar canvas = document.getElementById(\\\"canvas\\\"); \\n\\tvar context = canvas.getContext(\\\"2d\\\");\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"save()\"]), \" \", _vm._h('td', [\"This method saves the canvas state, including the transformation matrix, styling properties and the clipping mask.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"restore()\"]), \" \", _vm._h('td', [\"This method restores the last state saved, including the transformation matrix, styling properties and the clipping mask.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.save(); \\n\\tcontext.restore();\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Rectangles\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"fillRect(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method will draw a solid rectangle directly to the canvas in the position x,y and the size width,height.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"strokeRect(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method will draw an outline rectangle directly to the canvas in the position x,y and the size width,height.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"clearRect(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method clears the area in the canvas using a rectangular shape declared by the value of its attributes.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.fillRect(0,0,100,100); \\n\\tcontext.clearRect(25,25,60,60); \\n\\tcontext.strokeRect(50,50,50,50);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Paths\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"beginPath()\"]), \" \", _vm._h('td', [\"This method is required to start a new path.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"closePath()\"]), \" \", _vm._h('td', [\"This method can be used at the end of a path to close it. It will generate a straight line from the last position of the pen to the point from which the path started. It’s not necessary to use this method when the path must remain open or it is drawn onto the canvas using fill().\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"rect(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method adds a rectangle to the path in the position x,y and with the size width,height.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"stroke()\"]), \" \", _vm._h('td', [\"This method is used to draw the path as an outline shape.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"fill()\"]), \" \", _vm._h('td', [\"This method is used to draw the path as a solid shape.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"clip()\"]), \" \", _vm._h('td', [\"This method is used to create a new clipping area defined by the path. Everything sent to the canvas after this method is declared will be drawn only if it falls inside the shape.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"moveTo(x, y)\"]), \" \", _vm._h('td', [\"This method moves the virtual pen to a new position. The next method will continue the path from that point.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.beginPath(); \\n\\tcontext.moveTo(75,50); \\n\\tcontext.lineTo(100,75); \\n\\tcontext.lineTo(45,125); \\n\\tcontext.closePath(); \\n\\tcontext.stroke(); // or context.fill(); \\n\\n\\tcontext.rect(10, 10, 80, 90);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Lines\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"lineTo(x, y)\"]), \" \", _vm._h('td', [\"This method adds a straight line to the path from the current pen’s position to the point indicated by the attributes x and y.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.beginPath(); \\n\\tcontext.moveTo(75,50); \\n\\tcontext.lineTo(100,75); \\n\\tcontext.lineTo(45,125); \\n\\tcontext.closePath();\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"lineWidth\"]), \" \", _vm._h('td', [\"This property sets the line thickness. By default, the value is 1.0.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"lineCap\"]), \" \", _vm._h('td', [\"This property determines the shape of the ending of the lines. There are three possible values: butt (normal ending), round (ending the line with a semicircle) and square (ending the line with a square).\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"lineJoin\"]), \" \", _vm._h('td', [\"This property determines the shape of the connection between two lines. It takes three values: round (where the join is rounded), bevel (where the join is cut) and miter (where the join is extended until both lines reach a single point).\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"miterLimit\"]), \" \", _vm._h('td', [\"This property takes a number to determine how long the lines will be extended when the lineJoin property is set to miter.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.lineWidth=6; \\n\\tcontext.lineCap='round'; \\n\\tcontext.lineJoin='miter'; \\n\\tcontext.miterLimit=10.0; \\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Arcs\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"arc(x, y, radius, startAngle, endAngle, direction)\"]), \" \", _vm._h('td', [\"This method adds an arc to the path. The center of the arc is determined by x and y, the angles are declared in radians and direction is a boolean value for clockwise or anticlockwise direction. To convert degrees into radians, use the formula: Math.PI/180×degrees.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.arc(30, 30, 20, 0, Math.PI, true);\\t\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Bezier and quadratic curves\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"quadraticCurveTo(cpx, cpy, x, y)\"]), \" \", _vm._h('td', [\"This method adds a quadratic Bézier curve to the path. It starts from the current pen’s position and ends at x,y. The cpx and cpy attributes specify the position of the control point that will shape the curve.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\"]), \" \", _vm._h('td', [\"This method adds a cubic Bézier curve to the path. It starts from the current pen’s position and ends at x,y. The cp1x, cp1y, cp2x, and cp2y attributes specify the position of the two control points that will shape the curve.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.beginPath();\\n\\tcontext.moveTo(50,50);\\n\\tcontext.quadraticCurveTo(40,40,25,75);\\n\\tcontext.quadraticCurveTo(125,25,75,25);\\n\\tcontext.stroke();\\n\\n\\tcontext.beginPath();\\n\\tcontext.moveTo(50,50);\\n\\tcontext.bezierCurveTo(75,37,70,25,50,25);\\n\\tcontext.bezierCurveTo(20,25,20,62.5,20,62.5);\\n\\tcontext.stroke();\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Images\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"drawImage()\"]), \" \", _vm._h('td', [\"This method will draw an image on the canvas. There are three possible syntaxes.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drawImage(image, x, y)\"]), \" \", _vm._h('td', [\"simple draw\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drawImage(image, x, y, width, height)\"]), \" \", _vm._h('td', [\"draw with scaling\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drawImage(img, sx, sy, swidth, sheight, x, y, width, height)\"]), \" \", _vm._h('td', [\"draw with slicing\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getImageData(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method gets a portion of canvas and saves it as an object. The values of the object are accessible through the properties width, height and data. The first two properties return the size of the portion of the image taken, and data returns the information as an array with values representing the colors of the pixels. This values can be accessed using the formula (width×4×y)+(x×4).\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"putImageData(imagedata, x, y)\"]), \" \", _vm._h('td', [\"This method draws the image represented by the information in imagedata onto the canvas.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"createImageData(width, height)\"]), \" \", _vm._h('td', [\"This method creates a new image in data format. All the pixels are initially transparent black. It can take image data as an attribute instead of width and height. In this case the new image will have the size determined by the data provided.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"createPattern(image, type)\"]), \" \", _vm._h('td', [\"This method creates a pattern from an image that later can be assigned to a shape as a color using the fillStyle property. The possible values for the type attribute are repeat, repeat-x, repeat-y and no-repeat.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tvar img = new Image(src); \\n\\tcontext.drawImage(img,0,0);\\n\\tcontext.drawImage(img,0,0,100,80);\\n\\tcontext.drawImage(img,33,71,104,124,21,20,87,104);\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"img\"]), \" \", _vm._h('td', [\"Specifies the image, canvas, or video element to use\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"sx\"]), \" \", _vm._h('td', [\"Optional. The x coordinate where to start clipping\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"sy\"]), \" \", _vm._h('td', [\"Optional. The y coordinate where to start clipping\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"swidth\"]), \" \", _vm._h('td', [\"Optional. The width of the clipped image\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"sheight\"]), \" \", _vm._h('td', [\"Optional. The height of the clipped image\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"x\"]), \" \", _vm._h('td', [\"The x coordinate where to place the image on the canvas\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"y\"]), \" \", _vm._h('td', [\"The y coordinate where to place the image on the canvas\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"width\"]), \" \", _vm._h('td', [\"Optional. The width of the image to use (stretch or reduce the image)\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"height\"]), \" \", _vm._h('td', [\"Optional. The height of the image to use (stretch or reduce the image)\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Colors\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"strokeStyle\"]), \" \", _vm._h('td', [\"This property declares the color for the lines of the shapes. It can take any CSS value, including functions such as rgb() and rgba().\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"fillStyle\"]), \" \", _vm._h('td', [\"This property declares the color for the interior of solid shapes. It can take any CSS value, including the functions rgb() and rgba(). It’s also used to assign gradients and patterns to shapes (These styles are first assigned to a variable and then the variable is assigned as a color to this property.).\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"globalAlpha\"]), \" \", _vm._h('td', [\"This property is used to set the level of transparency for every shape. It takes values from 0.0 (fully opaque) to 1.0 (fully transparent).\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.strokeStyle = \\\"#FFA500\\\"; \\n\\tcontext.fillStyle = \\\"#FFA500\\\"; \\n\\tcontext.globalAlpha=1;\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Gradients\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-cation\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"createLinearGradient(x1, y1, x2, y2)\"]), \" \", _vm._h('td', [\"This method creates a linear gradient to be assigned to a shape as a color using the fillStyle property. Its attributes only specify the start and end positions (relative to the canvas). To declare the colors involved in the gradient, this method must be used in conjunction with addColorStop().\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"createRadialGradient(x1, y1, r1, x2, y2, r2)\"]), \" \", _vm._h('td', [\"This method creates a radial gradient to be assigned to a shape as a color using the fillStyle property. The gradient is built from two circles. The attributes only specify the position and radius of the circles (relative to the canvas). To declare the colors involved in the gradient, this method must be used in conjunction with addColorStop().\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"addColorStop(position, color)\"]), \" \", _vm._h('td', [\"This method is used to declare the colors for gradients. The attribute position is a value between 0.0 and 1.0, used to determine where the color will start degrading.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tvar lingrad = context.createLinearGradient(0,0,0,150); \\n\\tlingrad.addColorStop(0, '#00ABEB'); \\n\\tlingrad.addColorStop(0.5, '#fff'); \\n\\tlingrad.addColorStop(0.5, '#26C000'); \\n\\tlingrad.addColorStop(1, '#fff'); \\n\\n\\tvar radgrad = ctx.createRadialGradient(45,45,10,52,50,30); \\n\\tradgrad.addColorStop(0, '#A7D30C'); \\n\\tradgrad.addColorStop(0.9, '#019F62'); \\n\\tradgrad.addColorStop(1, 'rgba(1,159,98,0)');\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Shadows\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"shadowColor\"]), \" \", _vm._h('td', [\"This property sets the color for a shadow. It takes CSS values.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"shadowOffsetX\"]), \" \", _vm._h('td', [\"This property declares how many units far the shadow will be from the object in the horizontal direction.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"shadowOffsetY\"]), \" \", _vm._h('td', [\"This property declares how many units far the shadow will be from the object in the vertical direction.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"shadowBlur\"]), \" \", _vm._h('td', [\"This property takes a number to produce a blurring effect for a shadow.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.shadowOffsetX = 1; \\n\\tcontext.shadowOffsetY = 1; \\n\\tcontext.shadowBlur = 3; \\n\\tcontext.shadowColor = \\\"rgba(255, 0, 0, 0.5)\\\";\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Translating\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"translate(x, y)\"]), \" \", _vm._h('td', [\"This method moves the canvas origin to the point x,y. The initial position of the origin (0,0) is the top-left corner of the area generated by the\\n                    \", _vm._h('canvas', [\" element.\"])])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.translate(100, 100);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Rotating\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"rotate(angle)\"]), \" \", _vm._h('td', [\"This method is used to rotate the canvas over the origin. The angle must be declared in radians. To convert degrees into radians, use the formula: Math.PI/180×degrees.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.rotate(Math.PI*2);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Scaling\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"scale(x, y)\"]), \" \", _vm._h('td', [\"This method changes the scale of the canvas. The values by default are (1.0,1.0). The values can be negative.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.scale(0.6,0.6);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Transforms\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"transform(m1, m2, m3, m4, dx, dy)\"]), \" \", _vm._h('td', [\"This method modifies the transformation matrix of the canvas. The new matrix is calculated over the previous one.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"setTransform(m1, m2, m3, m4, dx, dy)\"]), \" \", _vm._h('td', [\"This method modifies the transformation matrix of the canvas. It resets the previous values and declares the new ones.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.transform(1,0.5,-0.5,1,30,10);\\n\\tcontext.setTransform(0.866, -0.5, 0.866, 0.5, 0, 0);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Compositing\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"\\n                    globalCompositeOperation\"]), \" \", _vm._h('td', [\"This property defines the composite operation between the source and destination states of the canvas.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('img', {\n    attrs: {\n      \"src\": __webpack_require__(51),\n      \"height\": \"418\",\n      \"width\": \"549\"\n    }\n  })]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.globalCompositeOperation='source-over;\\n\\t\"])])\n}]}\n\n/***/ },\n\n/***/ 8:\n/***/ function(module, exports, __webpack_require__) {\n\nvar __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(41)\n\n/* template */\nvar __vue_template__ = __webpack_require__(52)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.build.js","<template>\n    <div class=\"api\">\n        <h2>Canvas2D API</h2>\n        <div class=\"api-info\">\n            <h3>Canvas2D API</h3>\n            <p>Canvas is a part of the new HTML5 specification for next generation web technologies. The HTML5 canvas is an HTML tag that you can embed inside an HTML document for the purpose of drawing graphics with JavaScript. Since the HTML5 canvas is a bitmap, every pixel drawn onto the canvas overrides pixels beneath it.</p>\n        </div>\n        <div class=\"api-info\">\n            <h3>The Canvas tag</h3>\n        </div>\n        <pre class=\"api-code\">\n\t\t&lt;canvas id=\"canvas\" width=\"578\" height=\"200\"&gt;&lt;/canvas&gt;\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Context</h3>\n            <p>&lt;canvas&gt; creates a fixed size drawing surface that exposes one or more rendering contexts, which are used to create and manipulate the content shown. We'll focus on the 2D rendering context.</p>\n        </div>\n        <pre class=\"api-code\">\n\tvar canvas = document.getElementById(\"canvas\"); \n\tvar context = canvas.getContext(\"2d\");\n\t</pre>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>save()</td>\n                <td>This method saves the canvas state, including the transformation matrix, styling properties and the clipping mask.</td>\n            </tr>\n            <tr>\n                <td>restore()</td>\n                <td>This method restores the last state saved, including the transformation matrix, styling properties and the clipping mask.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.save(); \n\tcontext.restore();\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Rectangles</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>fillRect(x, y, width, height)</td>\n                <td>This method will draw a solid rectangle directly to the canvas in the position x,y and the size width,height.</td>\n            </tr>\n            <tr>\n                <td>strokeRect(x, y, width, height)</td>\n                <td>This method will draw an outline rectangle directly to the canvas in the position x,y and the size width,height.</td>\n            </tr>\n            <tr>\n                <td>clearRect(x, y, width, height)</td>\n                <td>This method clears the area in the canvas using a rectangular shape declared by the value of its attributes.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.fillRect(0,0,100,100); \n\tcontext.clearRect(25,25,60,60); \n\tcontext.strokeRect(50,50,50,50);\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Paths</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>beginPath()</td>\n                <td>This method is required to start a new path.</td>\n            </tr>\n            <tr>\n                <td>closePath()</td>\n                <td>This method can be used at the end of a path to close it. It will generate a straight line from the last position of the pen to the point from which the path started. It’s not necessary to use this method when the path must remain open or it is drawn onto the canvas using fill().</td>\n            </tr>\n            <tr>\n                <td>rect(x, y, width, height)</td>\n                <td>This method adds a rectangle to the path in the position x,y and with the size width,height.</td>\n            </tr>\n            <tr>\n                <td>stroke()</td>\n                <td>This method is used to draw the path as an outline shape.</td>\n            </tr>\n            <tr>\n                <td>fill()</td>\n                <td>This method is used to draw the path as a solid shape.</td>\n            </tr>\n            <tr>\n                <td>clip()</td>\n                <td>This method is used to create a new clipping area defined by the path. Everything sent to the canvas after this method is declared will be drawn only if it falls inside the shape.</td>\n            </tr>\n            <tr>\n                <td>moveTo(x, y)</td>\n                <td>This method moves the virtual pen to a new position. The next method will continue the path from that point.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.beginPath(); \n\tcontext.moveTo(75,50); \n\tcontext.lineTo(100,75); \n\tcontext.lineTo(45,125); \n\tcontext.closePath(); \n\tcontext.stroke(); // or context.fill(); \n\n\tcontext.rect(10, 10, 80, 90);\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Lines</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>lineTo(x, y)</td>\n                <td>This method adds a straight line to the path from the current pen’s position to the point indicated by the attributes x and y.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.beginPath(); \n\tcontext.moveTo(75,50); \n\tcontext.lineTo(100,75); \n\tcontext.lineTo(45,125); \n\tcontext.closePath();\n\t</pre>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>lineWidth</td>\n                <td>This property sets the line thickness. By default, the value is 1.0.</td>\n            </tr>\n            <tr>\n                <td>lineCap</td>\n                <td>This property determines the shape of the ending of the lines. There are three possible values: butt (normal ending), round (ending the line with a semicircle) and square (ending the line with a square).</td>\n            </tr>\n            <tr>\n                <td>lineJoin</td>\n                <td>This property determines the shape of the connection between two lines. It takes three values: round (where the join is rounded), bevel (where the join is cut) and miter (where the join is extended until both lines reach a single point).</td>\n            </tr>\n            <tr>\n                <td>miterLimit</td>\n                <td>This property takes a number to determine how long the lines will be extended when the lineJoin property is set to miter.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.lineWidth=6; \n\tcontext.lineCap='round'; \n\tcontext.lineJoin='miter'; \n\tcontext.miterLimit=10.0; \n\t</pre>\n        <div class=\"api-info\">\n            <h3>Arcs</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>arc(x, y, radius, startAngle, endAngle, direction)</td>\n                <td>This method adds an arc to the path. The center of the arc is determined by x and y, the angles are declared in radians and direction is a boolean value for clockwise or anticlockwise direction. To convert degrees into radians, use the formula: Math.PI/180×degrees.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.arc(30, 30, 20, 0, Math.PI, true);\t\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Bezier and quadratic curves</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>quadraticCurveTo(cpx, cpy, x, y)</td>\n                <td>This method adds a quadratic Bézier curve to the path. It starts from the current pen’s position and ends at x,y. The cpx and cpy attributes specify the position of the control point that will shape the curve.</td>\n            </tr>\n            <tr>\n                <td>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</td>\n                <td>This method adds a cubic Bézier curve to the path. It starts from the current pen’s position and ends at x,y. The cp1x, cp1y, cp2x, and cp2y attributes specify the position of the two control points that will shape the curve.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.beginPath();\n\tcontext.moveTo(50,50);\n\tcontext.quadraticCurveTo(40,40,25,75);\n\tcontext.quadraticCurveTo(125,25,75,25);\n\tcontext.stroke();\n\n\tcontext.beginPath();\n\tcontext.moveTo(50,50);\n\tcontext.bezierCurveTo(75,37,70,25,50,25);\n\tcontext.bezierCurveTo(20,25,20,62.5,20,62.5);\n\tcontext.stroke();\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Images</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>drawImage()</td>\n                <td>This method will draw an image on the canvas. There are three possible syntaxes.</td>\n            </tr>\n            <tr>\n                <td>drawImage(image, x, y)</td>\n                <td>simple draw</td>\n            </tr>\n            <tr>\n                <td>drawImage(image, x, y, width, height)</td>\n                <td>draw with scaling</td>\n            </tr>\n            <tr>\n                <td>drawImage(img, sx, sy, swidth, sheight, x, y, width, height)</td>\n                <td>draw with slicing</td>\n            </tr>\n            <tr>\n                <td>getImageData(x, y, width, height)</td>\n                <td>This method gets a portion of canvas and saves it as an object. The values of the object are accessible through the properties width, height and data. The first two properties return the size of the portion of the image taken, and data returns the information as an array with values representing the colors of the pixels. This values can be accessed using the formula (width×4×y)+(x×4).</td>\n            </tr>\n            <tr>\n                <td>putImageData(imagedata, x, y)</td>\n                <td>This method draws the image represented by the information in imagedata onto the canvas.</td>\n            </tr>\n            <tr>\n                <td>createImageData(width, height)</td>\n                <td>This method creates a new image in data format. All the pixels are initially transparent black. It can take image data as an attribute instead of width and height. In this case the new image will have the size determined by the data provided.</td>\n            </tr>\n            <tr>\n                <td>createPattern(image, type)</td>\n                <td>This method creates a pattern from an image that later can be assigned to a shape as a color using the fillStyle property. The possible values for the type attribute are repeat, repeat-x, repeat-y and no-repeat.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tvar img = new Image(src); \n\tcontext.drawImage(img,0,0);\n\tcontext.drawImage(img,0,0,100,80);\n\tcontext.drawImage(img,33,71,104,124,21,20,87,104);\n\t</pre>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>img</td>\n                <td>Specifies the image, canvas, or video element to use</td>\n            </tr>\n            <tr>\n                <td>sx</td>\n                <td>Optional. The x coordinate where to start clipping</td>\n            </tr>\n            <tr>\n                <td>sy</td>\n                <td>Optional. The y coordinate where to start clipping</td>\n            </tr>\n            <tr>\n                <td>swidth</td>\n                <td>Optional. The width of the clipped image</td>\n            </tr>\n            <tr>\n                <td>sheight</td>\n                <td>Optional. The height of the clipped image</td>\n            </tr>\n            <tr>\n                <td>x</td>\n                <td>The x coordinate where to place the image on the canvas</td>\n            </tr>\n            <tr>\n                <td>y</td>\n                <td>The y coordinate where to place the image on the canvas</td>\n            </tr>\n            <tr>\n                <td>width</td>\n                <td>Optional. The width of the image to use (stretch or reduce the image)</td>\n            </tr>\n            <tr>\n                <td>height</td>\n                <td>Optional. The height of the image to use (stretch or reduce the image)</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>Colors</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>strokeStyle</td>\n                <td>This property declares the color for the lines of the shapes. It can take any CSS value, including functions such as rgb() and rgba().</td>\n            </tr>\n            <tr>\n                <td>fillStyle</td>\n                <td>This property declares the color for the interior of solid shapes. It can take any CSS value, including the functions rgb() and rgba(). It’s also used to assign gradients and patterns to shapes (These styles are first assigned to a variable and then the variable is assigned as a color to this property.).</td>\n            </tr>\n            <tr>\n                <td>globalAlpha</td>\n                <td>This property is used to set the level of transparency for every shape. It takes values from 0.0 (fully opaque) to 1.0 (fully transparent).</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.strokeStyle = \"#FFA500\"; \n\tcontext.fillStyle = \"#FFA500\"; \n\tcontext.globalAlpha=1;\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Gradients</h3>\n        </div>\n        <h4 class=\"api-table-cation\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>createLinearGradient(x1, y1, x2, y2)</td>\n                <td>This method creates a linear gradient to be assigned to a shape as a color using the fillStyle property. Its attributes only specify the start and end positions (relative to the canvas). To declare the colors involved in the gradient, this method must be used in conjunction with addColorStop().</td>\n            </tr>\n            <tr>\n                <td>createRadialGradient(x1, y1, r1, x2, y2, r2)</td>\n                <td>This method creates a radial gradient to be assigned to a shape as a color using the fillStyle property. The gradient is built from two circles. The attributes only specify the position and radius of the circles (relative to the canvas). To declare the colors involved in the gradient, this method must be used in conjunction with addColorStop().</td>\n            </tr>\n            <tr>\n                <td>addColorStop(position, color)</td>\n                <td>This method is used to declare the colors for gradients. The attribute position is a value between 0.0 and 1.0, used to determine where the color will start degrading.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tvar lingrad = context.createLinearGradient(0,0,0,150); \n\tlingrad.addColorStop(0, '#00ABEB'); \n\tlingrad.addColorStop(0.5, '#fff'); \n\tlingrad.addColorStop(0.5, '#26C000'); \n\tlingrad.addColorStop(1, '#fff'); \n\n\tvar radgrad = ctx.createRadialGradient(45,45,10,52,50,30); \n\tradgrad.addColorStop(0, '#A7D30C'); \n\tradgrad.addColorStop(0.9, '#019F62'); \n\tradgrad.addColorStop(1, 'rgba(1,159,98,0)');\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Shadows</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>shadowColor</td>\n                <td>This property sets the color for a shadow. It takes CSS values.</td>\n            </tr>\n            <tr>\n                <td>shadowOffsetX</td>\n                <td>This property declares how many units far the shadow will be from the object in the horizontal direction.</td>\n            </tr>\n            <tr>\n                <td>shadowOffsetY</td>\n                <td>This property declares how many units far the shadow will be from the object in the vertical direction.</td>\n            </tr>\n            <tr>\n                <td>shadowBlur</td>\n                <td>This property takes a number to produce a blurring effect for a shadow.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.shadowOffsetX = 1; \n\tcontext.shadowOffsetY = 1; \n\tcontext.shadowBlur = 3; \n\tcontext.shadowColor = \"rgba(255, 0, 0, 0.5)\";\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Translating</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>translate(x, y)</td>\n                <td>This method moves the canvas origin to the point x,y. The initial position of the origin (0,0) is the top-left corner of the area generated by the\n                    <canvas> element.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.translate(100, 100);\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Rotating</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>rotate(angle)</td>\n                <td>This method is used to rotate the canvas over the origin. The angle must be declared in radians. To convert degrees into radians, use the formula: Math.PI/180×degrees.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.rotate(Math.PI*2);\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Scaling</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>scale(x, y)</td>\n                <td>This method changes the scale of the canvas. The values by default are (1.0,1.0). The values can be negative.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.scale(0.6,0.6);\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Transforms</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>transform(m1, m2, m3, m4, dx, dy)</td>\n                <td>This method modifies the transformation matrix of the canvas. The new matrix is calculated over the previous one.</td>\n            </tr>\n            <tr>\n                <td>setTransform(m1, m2, m3, m4, dx, dy)</td>\n                <td>This method modifies the transformation matrix of the canvas. It resets the previous values and declares the new ones.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tcontext.transform(1,0.5,-0.5,1,30,10);\n\tcontext.setTransform(0.866, -0.5, 0.866, 0.5, 0, 0);\n\t</pre>\n        <div class=\"api-info\">\n            <h3>Compositing</h3>\n        </div>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>\n                    globalCompositeOperation</td>\n                <td>This property defines the composite operation between the source and destination states of the canvas.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <img src=\"../assets/source.png\" height=\"418\" width=\"549\">\n        </div>\n        <pre class=\"api-code\">\n\tcontext.globalCompositeOperation='source-over;\n\t</pre>\n    </div>\n</template>\n<script>\nexport default {\n    name: 'canvas2d',\n    data() {\n        return {}\n    }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// Canvas2d.vue?0d032299","module.exports = __webpack_public_path__ + \"source.png?0cb2e095990b9c8a7ff839d32f2bdb17\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/source.png\n// module id = 51\n// module chunks = 0","module.exports={render:function (){var _vm=this;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;\n  return _vm._h('div', {\n    staticClass: \"api\"\n  }, [_vm._h('h2', [\"Canvas2D API\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Canvas2D API\"]), \" \", _vm._h('p', [\"Canvas is a part of the new HTML5 specification for next generation web technologies. The HTML5 canvas is an HTML tag that you can embed inside an HTML document for the purpose of drawing graphics with JavaScript. Since the HTML5 canvas is a bitmap, every pixel drawn onto the canvas overrides pixels beneath it.\"])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"The Canvas tag\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\t\\t<canvas id=\\\"canvas\\\" width=\\\"578\\\" height=\\\"200\\\"></canvas>\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Context\"]), \" \", _vm._h('p', [\"<canvas> creates a fixed size drawing surface that exposes one or more rendering contexts, which are used to create and manipulate the content shown. We'll focus on the 2D rendering context.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tvar canvas = document.getElementById(\\\"canvas\\\"); \\n\\tvar context = canvas.getContext(\\\"2d\\\");\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"save()\"]), \" \", _vm._h('td', [\"This method saves the canvas state, including the transformation matrix, styling properties and the clipping mask.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"restore()\"]), \" \", _vm._h('td', [\"This method restores the last state saved, including the transformation matrix, styling properties and the clipping mask.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.save(); \\n\\tcontext.restore();\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Rectangles\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"fillRect(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method will draw a solid rectangle directly to the canvas in the position x,y and the size width,height.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"strokeRect(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method will draw an outline rectangle directly to the canvas in the position x,y and the size width,height.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"clearRect(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method clears the area in the canvas using a rectangular shape declared by the value of its attributes.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.fillRect(0,0,100,100); \\n\\tcontext.clearRect(25,25,60,60); \\n\\tcontext.strokeRect(50,50,50,50);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Paths\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"beginPath()\"]), \" \", _vm._h('td', [\"This method is required to start a new path.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"closePath()\"]), \" \", _vm._h('td', [\"This method can be used at the end of a path to close it. It will generate a straight line from the last position of the pen to the point from which the path started. It’s not necessary to use this method when the path must remain open or it is drawn onto the canvas using fill().\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"rect(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method adds a rectangle to the path in the position x,y and with the size width,height.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"stroke()\"]), \" \", _vm._h('td', [\"This method is used to draw the path as an outline shape.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"fill()\"]), \" \", _vm._h('td', [\"This method is used to draw the path as a solid shape.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"clip()\"]), \" \", _vm._h('td', [\"This method is used to create a new clipping area defined by the path. Everything sent to the canvas after this method is declared will be drawn only if it falls inside the shape.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"moveTo(x, y)\"]), \" \", _vm._h('td', [\"This method moves the virtual pen to a new position. The next method will continue the path from that point.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.beginPath(); \\n\\tcontext.moveTo(75,50); \\n\\tcontext.lineTo(100,75); \\n\\tcontext.lineTo(45,125); \\n\\tcontext.closePath(); \\n\\tcontext.stroke(); // or context.fill(); \\n\\n\\tcontext.rect(10, 10, 80, 90);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Lines\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"lineTo(x, y)\"]), \" \", _vm._h('td', [\"This method adds a straight line to the path from the current pen’s position to the point indicated by the attributes x and y.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.beginPath(); \\n\\tcontext.moveTo(75,50); \\n\\tcontext.lineTo(100,75); \\n\\tcontext.lineTo(45,125); \\n\\tcontext.closePath();\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"lineWidth\"]), \" \", _vm._h('td', [\"This property sets the line thickness. By default, the value is 1.0.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"lineCap\"]), \" \", _vm._h('td', [\"This property determines the shape of the ending of the lines. There are three possible values: butt (normal ending), round (ending the line with a semicircle) and square (ending the line with a square).\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"lineJoin\"]), \" \", _vm._h('td', [\"This property determines the shape of the connection between two lines. It takes three values: round (where the join is rounded), bevel (where the join is cut) and miter (where the join is extended until both lines reach a single point).\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"miterLimit\"]), \" \", _vm._h('td', [\"This property takes a number to determine how long the lines will be extended when the lineJoin property is set to miter.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.lineWidth=6; \\n\\tcontext.lineCap='round'; \\n\\tcontext.lineJoin='miter'; \\n\\tcontext.miterLimit=10.0; \\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Arcs\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"arc(x, y, radius, startAngle, endAngle, direction)\"]), \" \", _vm._h('td', [\"This method adds an arc to the path. The center of the arc is determined by x and y, the angles are declared in radians and direction is a boolean value for clockwise or anticlockwise direction. To convert degrees into radians, use the formula: Math.PI/180×degrees.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.arc(30, 30, 20, 0, Math.PI, true);\\t\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Bezier and quadratic curves\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"quadraticCurveTo(cpx, cpy, x, y)\"]), \" \", _vm._h('td', [\"This method adds a quadratic Bézier curve to the path. It starts from the current pen’s position and ends at x,y. The cpx and cpy attributes specify the position of the control point that will shape the curve.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\"]), \" \", _vm._h('td', [\"This method adds a cubic Bézier curve to the path. It starts from the current pen’s position and ends at x,y. The cp1x, cp1y, cp2x, and cp2y attributes specify the position of the two control points that will shape the curve.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.beginPath();\\n\\tcontext.moveTo(50,50);\\n\\tcontext.quadraticCurveTo(40,40,25,75);\\n\\tcontext.quadraticCurveTo(125,25,75,25);\\n\\tcontext.stroke();\\n\\n\\tcontext.beginPath();\\n\\tcontext.moveTo(50,50);\\n\\tcontext.bezierCurveTo(75,37,70,25,50,25);\\n\\tcontext.bezierCurveTo(20,25,20,62.5,20,62.5);\\n\\tcontext.stroke();\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Images\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"drawImage()\"]), \" \", _vm._h('td', [\"This method will draw an image on the canvas. There are three possible syntaxes.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drawImage(image, x, y)\"]), \" \", _vm._h('td', [\"simple draw\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drawImage(image, x, y, width, height)\"]), \" \", _vm._h('td', [\"draw with scaling\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drawImage(img, sx, sy, swidth, sheight, x, y, width, height)\"]), \" \", _vm._h('td', [\"draw with slicing\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getImageData(x, y, width, height)\"]), \" \", _vm._h('td', [\"This method gets a portion of canvas and saves it as an object. The values of the object are accessible through the properties width, height and data. The first two properties return the size of the portion of the image taken, and data returns the information as an array with values representing the colors of the pixels. This values can be accessed using the formula (width×4×y)+(x×4).\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"putImageData(imagedata, x, y)\"]), \" \", _vm._h('td', [\"This method draws the image represented by the information in imagedata onto the canvas.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"createImageData(width, height)\"]), \" \", _vm._h('td', [\"This method creates a new image in data format. All the pixels are initially transparent black. It can take image data as an attribute instead of width and height. In this case the new image will have the size determined by the data provided.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"createPattern(image, type)\"]), \" \", _vm._h('td', [\"This method creates a pattern from an image that later can be assigned to a shape as a color using the fillStyle property. The possible values for the type attribute are repeat, repeat-x, repeat-y and no-repeat.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tvar img = new Image(src); \\n\\tcontext.drawImage(img,0,0);\\n\\tcontext.drawImage(img,0,0,100,80);\\n\\tcontext.drawImage(img,33,71,104,124,21,20,87,104);\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"img\"]), \" \", _vm._h('td', [\"Specifies the image, canvas, or video element to use\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"sx\"]), \" \", _vm._h('td', [\"Optional. The x coordinate where to start clipping\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"sy\"]), \" \", _vm._h('td', [\"Optional. The y coordinate where to start clipping\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"swidth\"]), \" \", _vm._h('td', [\"Optional. The width of the clipped image\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"sheight\"]), \" \", _vm._h('td', [\"Optional. The height of the clipped image\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"x\"]), \" \", _vm._h('td', [\"The x coordinate where to place the image on the canvas\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"y\"]), \" \", _vm._h('td', [\"The y coordinate where to place the image on the canvas\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"width\"]), \" \", _vm._h('td', [\"Optional. The width of the image to use (stretch or reduce the image)\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"height\"]), \" \", _vm._h('td', [\"Optional. The height of the image to use (stretch or reduce the image)\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Colors\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"strokeStyle\"]), \" \", _vm._h('td', [\"This property declares the color for the lines of the shapes. It can take any CSS value, including functions such as rgb() and rgba().\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"fillStyle\"]), \" \", _vm._h('td', [\"This property declares the color for the interior of solid shapes. It can take any CSS value, including the functions rgb() and rgba(). It’s also used to assign gradients and patterns to shapes (These styles are first assigned to a variable and then the variable is assigned as a color to this property.).\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"globalAlpha\"]), \" \", _vm._h('td', [\"This property is used to set the level of transparency for every shape. It takes values from 0.0 (fully opaque) to 1.0 (fully transparent).\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.strokeStyle = \\\"#FFA500\\\"; \\n\\tcontext.fillStyle = \\\"#FFA500\\\"; \\n\\tcontext.globalAlpha=1;\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Gradients\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-cation\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"createLinearGradient(x1, y1, x2, y2)\"]), \" \", _vm._h('td', [\"This method creates a linear gradient to be assigned to a shape as a color using the fillStyle property. Its attributes only specify the start and end positions (relative to the canvas). To declare the colors involved in the gradient, this method must be used in conjunction with addColorStop().\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"createRadialGradient(x1, y1, r1, x2, y2, r2)\"]), \" \", _vm._h('td', [\"This method creates a radial gradient to be assigned to a shape as a color using the fillStyle property. The gradient is built from two circles. The attributes only specify the position and radius of the circles (relative to the canvas). To declare the colors involved in the gradient, this method must be used in conjunction with addColorStop().\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"addColorStop(position, color)\"]), \" \", _vm._h('td', [\"This method is used to declare the colors for gradients. The attribute position is a value between 0.0 and 1.0, used to determine where the color will start degrading.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tvar lingrad = context.createLinearGradient(0,0,0,150); \\n\\tlingrad.addColorStop(0, '#00ABEB'); \\n\\tlingrad.addColorStop(0.5, '#fff'); \\n\\tlingrad.addColorStop(0.5, '#26C000'); \\n\\tlingrad.addColorStop(1, '#fff'); \\n\\n\\tvar radgrad = ctx.createRadialGradient(45,45,10,52,50,30); \\n\\tradgrad.addColorStop(0, '#A7D30C'); \\n\\tradgrad.addColorStop(0.9, '#019F62'); \\n\\tradgrad.addColorStop(1, 'rgba(1,159,98,0)');\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Shadows\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"shadowColor\"]), \" \", _vm._h('td', [\"This property sets the color for a shadow. It takes CSS values.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"shadowOffsetX\"]), \" \", _vm._h('td', [\"This property declares how many units far the shadow will be from the object in the horizontal direction.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"shadowOffsetY\"]), \" \", _vm._h('td', [\"This property declares how many units far the shadow will be from the object in the vertical direction.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"shadowBlur\"]), \" \", _vm._h('td', [\"This property takes a number to produce a blurring effect for a shadow.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.shadowOffsetX = 1; \\n\\tcontext.shadowOffsetY = 1; \\n\\tcontext.shadowBlur = 3; \\n\\tcontext.shadowColor = \\\"rgba(255, 0, 0, 0.5)\\\";\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Translating\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"translate(x, y)\"]), \" \", _vm._h('td', [\"This method moves the canvas origin to the point x,y. The initial position of the origin (0,0) is the top-left corner of the area generated by the\\n                    \", _vm._h('canvas', [\" element.\"])])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.translate(100, 100);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Rotating\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"rotate(angle)\"]), \" \", _vm._h('td', [\"This method is used to rotate the canvas over the origin. The angle must be declared in radians. To convert degrees into radians, use the formula: Math.PI/180×degrees.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.rotate(Math.PI*2);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Scaling\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"scale(x, y)\"]), \" \", _vm._h('td', [\"This method changes the scale of the canvas. The values by default are (1.0,1.0). The values can be negative.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.scale(0.6,0.6);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Transforms\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"transform(m1, m2, m3, m4, dx, dy)\"]), \" \", _vm._h('td', [\"This method modifies the transformation matrix of the canvas. The new matrix is calculated over the previous one.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"setTransform(m1, m2, m3, m4, dx, dy)\"]), \" \", _vm._h('td', [\"This method modifies the transformation matrix of the canvas. It resets the previous values and declares the new ones.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.transform(1,0.5,-0.5,1,30,10);\\n\\tcontext.setTransform(0.866, -0.5, 0.866, 0.5, 0, 0);\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Compositing\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"\\n                    globalCompositeOperation\"]), \" \", _vm._h('td', [\"This property defines the composite operation between the source and destination states of the canvas.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('img', {\n    attrs: {\n      \"src\": require(\"../assets/source.png\"),\n      \"height\": \"418\",\n      \"width\": \"549\"\n    }\n  })]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tcontext.globalCompositeOperation='source-over;\\n\\t\"])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-07678ed8!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Canvas2d.vue\n// module id = 52\n// module chunks = 0","var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = require(\"!!babel-loader!vue-loader/lib/selector?type=script&index=0!./Canvas2d.vue\")\n\n/* template */\nvar __vue_template__ = require(\"!!vue-loader/lib/template-compiler?id=data-v-07678ed8!vue-loader/lib/selector?type=template&index=0!./Canvas2d.vue\")\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Canvas2d.vue\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}