webpackJsonp([1],{20:function(e,t,r){var s,a;s=r(54);var o=r(66);a=s=s||{},"object"!=typeof s.default&&"function"!=typeof s.default||(a=s=s.default),"function"==typeof a&&(a=a.options),a.render=o.render,a.staticRenderFns=o.staticRenderFns,e.exports=s},54:function(e,t,r){"use strict";t.default={name:"webworkers",data:function(){return{}}}},66:function(e,t){e.exports={render:function(){var e=this;return e._m(0)},staticRenderFns:[function(){var e=this;return e._h("div",{staticClass:"api"},[e._h("h2",["WebWorker API"])," ",e._h("div",{staticClass:"api-info"},[e._h("h3",["WebWorker API"])," ",e._h("p",["Web Workers is an API designed with the specific purpose of turning Javascript into a multithreading language. Now, thanks to HTML5, we are able to execute time-consuming codes in the background while the main script continues running on the web page, receiving the user’s input and keeping the document responsive.\n            "])])," ",e._h("div",{staticClass:"api-info"},[e._h("h3",["Worker (Dedicated Workers)"])," ",e._h("p",["The web worker feature revolves around a new object called the Worker. When you want to run something in the background, you create a new Worker, give it some code, and send it some data.\n            "])])," ",e._h("h4",{staticClass:"api-table-caption"},["Worker(scriptURL)"])," ",e._h("pre",{staticClass:"api-code"},['\n\tvar worker = new Worker("worker.js");\n\t'])," ",e._h("h4",{staticClass:"api-table-caption"},["Access"])," ",e._h("table",{staticClass:"api-table"},[e._h("tr",[e._h("td",["Due to their multi-threaded behavior, web workers only has access to a subset of JavaScript's features"])," ",e._h("td",["Workers do NOT have access to"])])," ",e._h("tr",[e._h("td",{staticClass:"api-green"},["The navigator object"])," ",e._h("td",{staticClass:"api-red"},["The DOM (it's not thread-safe)"])])," ",e._h("tr",[e._h("td",{staticClass:"api-green"},["The location object (read-only)"])," ",e._h("td",{staticClass:"api-red"},["The window object"])])," ",e._h("tr",[e._h("td",{staticClass:"api-green"},["XMLHttpRequest"])," ",e._h("td",{staticClass:"api-red"},["The document object"])])," ",e._h("tr",[e._h("td",{staticClass:"api-green"},["setTimeout()/clearTimeout() and setInterval()/clearInterval()"])," ",e._h("td",{staticClass:"api-red"},["The parent object"])])," ",e._h("tr",[e._h("td",["The Application Cache"])," ",e._h("td")])," ",e._h("tr",[e._h("td",["Importing external scripts using the importScripts() method"])," ",e._h("td",["Delete one single item."])])," ",e._h("tr",[e._h("td",["Spawning other web workers"])," ",e._h("td")])])," ",e._h("h4",{staticClass:"api-table-caption"},["The Methods"])," ",e._h("div",{staticClass:"api-info"},[e._h("p",["Workers are always running in the background, waiting for information to be processed. But usually their services won’t be necessary or required all the time, and need to stop or terminate their processing if they don’t needed.\n            "])])," ",e._h("table",{staticClass:"api-table"},[e._h("tr",[e._h("td",["postMessage(message)"])," ",e._h("td",["It sends a message toward or from the worker code. The message attribute is a string or a JSON object representing the message to be transmitted."])])," ",e._h("tr",[e._h("td",["terminate()"])," ",e._h("td",["terminates the worker from the main code."])])," ",e._h("tr",[e._h("td",["close()"])," ",e._h("td",["terminates the worker from inside the worker."])])," ",e._h("tr",[e._h("td",["importScripts(file)"])," ",e._h("td",["You can load external script files or libraries into a worker with the importScripts()function."])])])," ",e._h("pre",{staticClass:"api-code"},["\n\tvar workerInstance = new Worker('worker.js'); \n\tworkerInstance.terminate(); \n\tworkerInstance.postMessage(\"Hello World\" );\n\n\timportScripts('subscript.js'); \n        "])," ",e._h("h4",{staticClass:"api-table-caption"},["The Events"])," ",e._h("table",{staticClass:"api-table"},[e._h("tr",[e._h("td",["message (onmessage)"])," ",e._h("td",["This event is fired when a message is sent to the code. It can be used in the worker to listen for messages from the main code or the other way around."])])," ",e._h("tr",[e._h("td",["error"])," ",e._h("td",["This event is fired when an error occurs in the worker. It’s used in the main code to watch for worker’s errors. It returns information using three properties: message, filename and lineno. The message property represents the error message, the filename property shows the name of the file with the code that causes the error and the lineno property returns the line number in which the error occurred."])])," ",e._h("tr",[e._h("td",["close()"])," ",e._h("td",["terminates the worker from inside the worker."])])," ",e._h("tr",[e._h("td",["importScripts(file)"])," ",e._h("td",["You can load external script files or libraries into a worker with the importScripts()function."])])])," ",e._h("pre",{staticClass:"api-code"},["\n\tvar worker = new Worker('worker.js'); \n\tworker.onmessage = function (e){ \n\t\tconsole.log(e); \n\t} \n\tworker.postMessage(\"Hello World\" ); \n\n\tworker.addEventListener('error', onError, false); // or worker.onerror = onError; \n\tfunction onError(e){ \n\t\tconsole.log(e); // Error object \n\t}\n        "])," ",e._h("h4",{staticClass:"api-table-caption"},["The Error properties"])," ",e._h("table",{staticClass:"api-table"},[e._h("tr",[e._h("td",["message"])," ",e._h("td",["The message property represents the error message"])])," ",e._h("tr",[e._h("td",["filename"])," ",e._h("td",["the filename property shows the name of the file with the code that causes the error"])])," ",e._h("tr",[e._h("td",["lineno"])," ",e._h("td",["lineno property returns the line number in which the error occurred"])])," ",e._h("tr",[e._h("td",["importScripts(file)"])," ",e._h("td",["You can load external script files or libraries into a worker with the importScripts()function."])])])," ",e._h("div",{staticClass:"api-info"},[e._h("h3",["SharedWorker"])," ",e._h("p",["What we have seen so far is called a Dedicated Worker. This type of worker only responds to the main code from which it is created. There is another type of worker called a Shared Worker, which responds to multiple documents from the same origin. Working with multiple connections means that we can share the same worker from different windows, tabs or frames, and we can keep everyone updated and synchronized for the construction of complex applications."])," ",e._h("p",["The connections are made through ports and these ports can be saved inside the worker for future reference"])," ",e._h("p",[e._h("strong",["SharedWorker(scriptURL)"])," - This constructor returns a SharedWorker object. The scriptURL attribute is the path of the file containing the shared worker. An optional second attribute could be added to specify a name for the worker."])])," ",e._h("h4",{staticClass:"api-table-caption"},["The Methods"])," ",e._h("table",{staticClass:"api-table"},[e._h("tr",[e._h("td",["start() "])," ",e._h("td",["This method begins dispatching messages. It’s used to start the connection with the shared worker"])])])," ",e._h("h4",{staticClass:"api-table-caption"},["The Properties"])," ",e._h("table",{staticClass:"api-table"},[e._h("tr",[e._h("td",["port"])," ",e._h("td",["This property returns the value of the port for the connection to the shared worker. "])])])," ",e._h("h4",{staticClass:"api-table-caption"},["The Events"])," ",e._h("table",{staticClass:"api-table"},[e._h("tr",[e._h("td",["connect"])," ",e._h("td",["This event is fired in the shared worker when a new connection is requested from a document. "])])])," ",e._h("pre",{staticClass:"api-code"},["\n\tsharedWorker=new SharedWorker('sharedworker.js'); \n\tsharedWorker.port.addEventListener('message', function(e){ \n\t\tconsole.log(e.data); \n\t}, false); \n\tsharedWorker.port.start();\n        "])])}]}}});
//# sourceMappingURL=1.build.js.map