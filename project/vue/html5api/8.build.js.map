{"version":3,"sources":["webpack:///8.build.js","webpack:///./src/components/File.vue","webpack:///File.vue","webpack:///./src/components/File.vue?f41f"],"names":["webpackJsonp","10","module","exports","__webpack_require__","__vue_exports__","__vue_options__","__vue_template__","default","options","render","staticRenderFns","43","name","data","56","_vm","this","_m","_h","staticClass"],"mappings":"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","file":"8.build.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 10:\n/***/ function(module, exports, __webpack_require__) {\n\nvar __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(43)\n\n/* template */\nvar __vue_template__ = __webpack_require__(56)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n/***/ },\n\n/***/ 43:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ exports[\"default\"] = {\n    name: 'file',\n    data: function data() {\n        return {};\n    }\n};\n\n/***/ },\n\n/***/ 56:\n/***/ function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;\n  return _vm._h('div', {\n    staticClass: \"api\"\n  }, [_vm._h('h2', [\"File API\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"File API\"]), \" \", _vm._h('p', [\"JavaScript has always been good at working with strings and numbers, but binary data has never been its strong point.\"]), \" \", _vm._h('p', [\"Recently, however, it added a blob data type and interfaces to work with blobs (binary large objects). JavaScript sees a blob as a big chunk of raw data.\"]), \" \", _vm._h('p', [\"A blob is usually generated from a file, but not necessarily. Itâ€™s a good alternative to work with data without loading the entire file into memory, and it provides the possibility of processing binary information in small pieces.\"]), \" \", _vm._h('p', [\"We use the <input> tag to select files.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\t<input type=\\\"file\\\" name=\\\"files\\\" id=\\\"files\\\" />\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\" Blob Interface (File API)\"]), \" \", _vm._h('p', [\"This interface provides properties and methods to operate with blobs. This interface is inherited by the File Interface.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"slice(start, length, type)\"]), \" \", _vm._h('td', [\"This method returns the part of the blob or file indicated by the values in bytes of the start and length attributes.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"size\"]), \" \", _vm._h('td', [\"This property represents the size of the blob or file in bytes.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"type\"]), \" \", _vm._h('td', [\"This property represents the media type of the blob or file.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"File Interface (File API)\"]), \" \", _vm._h('p', [\"This interface is an extension of the Blob Interface to process files.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"name\"]), \" \", _vm._h('td', [\"This property represents the name of the file.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"type\"]), \" \", _vm._h('td', [\"This property represents the media type of the blob or file.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileReader Interface (File API)\"]), \" \", _vm._h('p', [\"This interface provides specific methods, properties and events for reading files and blobs into memory.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tvar fileReader=new FileReader(); \\n\\tfileReader.readAsText(file, \\\"UTF-16\\\"); \\n\\tfileReader.onprogress = updateProgress; \\n\\tfileReader.addEventsListener('load', onLoad, false);\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"readAsArrayBuffer(file)\"]), \" \", _vm._h('td', [\"This method returns a file or blobâ€™s content as an ArrayBuffer.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"readAsBinaryString(file)\"]), \" \", _vm._h('td', [\"This method returns a file or blobâ€™s content as a binary string.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"readAsText(file)\"]), \" \", _vm._h('td', [\"This method interprets a file or blobâ€™s content and returns it as a text.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"readAsDataURL(file)\"]), \" \", _vm._h('td', [\"This method returns a file or blobâ€™s content as a data:url.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"abort()\"]), \" \", _vm._h('td', [\"This method aborts the reading process.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"result\"]), \" \", _vm._h('td', [\"This property represents the data returned by the reading methods.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Events\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"loadstart\"]), \" \", _vm._h('td', [\"This event is fired when the read starts.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"progress\"]), \" \", _vm._h('td', [\"This event is fired periodically to report reading status.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"load\"]), \" \", _vm._h('td', [\"This event is fired when the reading is complete.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"abort\"]), \" \", _vm._h('td', [\"This event is fired when the reading process is aborted.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"error\"]), \" \", _vm._h('td', [\"This event is fired in case of failure.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"loadend\"]), \" \", _vm._h('td', [\"This event is fired when the request is completed, either in success or failure.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"LocalFileSystem Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface is provided to initiate a File System for the application.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"requestFileSystem(type, size, success function, error function)\"]), \" \", _vm._h('td', [\"This method requests the initialization of a File System configured according to the value of its attributes. The type attribute can take two values: TEMPORARY or PERSISTENT. The size must be specified in bytes.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileSystem Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides information about the File System.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"name\"]), \" \", _vm._h('td', [\"This property represents the name of the File System.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"root\"]), \" \", _vm._h('td', [\"This property references the root directory of the File System.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Entry Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides methods and properties to process entries (files and directories) in the File System.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"isFile\"]), \" \", _vm._h('td', [\"This property is a boolean value indicating whether the entry is a file or not.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"isDirectory\"]), \" \", _vm._h('td', [\"This property is a boolean value indicating whether the entry is a directory or not.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"name\"]), \" \", _vm._h('td', [\"This property represents the name of the entry.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"fullPath\"]), \" \", _vm._h('td', [\"This property represents the full path from the root of the File System to the entry.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"filesystem\"]), \" \", _vm._h('td', [\"This property contains a reference to the File System.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"moveTo(parent, new name, success function, error function)\"]), \" \", _vm._h('td', [\"This method moves an entry to a different location. The parent attribute represents the directory in which the entry will be moved. The new name attribute, if specified, changes the name of the entry in the new location.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"copyTo(parent, new name, success function, error function)\"]), \" \", _vm._h('td', [\"This method makes a copy of the entry. The parent attribute represents the directory in which the copy of the entry will be created. The new name attribute, if specified, changes the name of the copy.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"remove(success function, error function)\"]), \" \", _vm._h('td', [\"This method deletes a file or an empty directory.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getParent(success function, error function)\"]), \" \", _vm._h('td', [\"This method returns the parent DirectoryEntry of the selected entry.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"DirectoryEntry Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides methods to create and read files and directories.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"createReader()\"]), \" \", _vm._h('td', [\"This method creates a DirectoryReader object to read entries.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getFile(path, options, success function, error function)\"]), \" \", _vm._h('td', [\"This method creates or reads the file indicated by the path attribute. The options attribute is set by two flags: create and exclusive. The first one indicates whether the file will be created or not, and exclusive, when it is set to true, forces this method to return an error if the file already exists.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getDirectory(path, options, success function, error function)\"]), \" \", _vm._h('td', [\"This method creates or reads the directory indicated by the path attribute. The options attribute is set by two flags: create and exclusive. The first one indicates whether the directory will be created or not, and exclusive, when it is set to true, forces this method to return an error if the directory already exists\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"removeRecursively(success function, error function)\"]), \" \", _vm._h('td', [\"This method deletes a directory and all its content.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"DirectoryReader Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides the alternative to get a list of entries in a specific directory.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"readEntries(success function, error function)\"]), \" \", _vm._h('td', [\"This method reads a block of entries from the selected directory. It returns null if no more entries are found.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileEntry Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides methods to get a File object from a specific file and a FileWriter object in order to add content to the file.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"createWriter(success function, error function)\"]), \" \", _vm._h('td', [\"This method creates a FileReader object to write content into a file.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"file(success function, error function)\"]), \" \", _vm._h('td', [\"This method returns a File object that represents the selected file.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"BlobBuilder Interface (File API: Writer)\"]), \" \", _vm._h('p', [\"This interface provides methods to work with blob objects.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"getBlob(type)\"]), \" \", _vm._h('td', [\"This method returns the content of a blob object as a blob.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"append(data)\"]), \" \", _vm._h('td', [\"This method appends data to a blob object. The interface provides three append() methods to append data as text, as a blob or as ArrayBuffer.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileWriter Interface (File API: Writer)\"]), \" \", _vm._h('p', [\"The FileWriter interface is an expansion of the FileSaver interface. The latter is not described here, but the events listed below are part of it.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"position\"]), \" \", _vm._h('td', [\"This property represents the current position in which the next writing will occur.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"length\"]), \" \", _vm._h('td', [\"This property represents the length of the file in bytes.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"write(blob)\"]), \" \", _vm._h('td', [\"This method writes content in a file.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"seek(offset)\"]), \" \", _vm._h('td', [\"This method sets a new position in which the next writing will occur.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"truncate(size)\"]), \" \", _vm._h('td', [\"This method changes the length of the file to the value of the size attribute (in bytes).\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Events\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"writestart\"]), \" \", _vm._h('td', [\"This event is fired when the write starts.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"progress\"]), \" \", _vm._h('td', [\"This event is fired periodically to report writing status.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"write\"]), \" \", _vm._h('td', [\"This event is fired when the writing is complete.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"abort\"]), \" \", _vm._h('td', [\"this event is fired when the writing process is aborted.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"error\"]), \" \", _vm._h('td', [\"This event is fired in case of failure.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"writeend\"]), \" \", _vm._h('td', [\"This event is fired when the request is completed, either in success or failure.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileError Interface (File API and extensions)\"]), \" \", _vm._h('p', [\"Several methods in this API return a value through a callback function when the process fails. This value can be compared with the following list to find the corresponding error:\"])]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"NOT_FOUND_ERRâ€”value 1\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"SECURITY_ERRâ€”value 2\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"ABORT_ERRâ€”value 3\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"NOT_READABLE_ERRâ€”value 4\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"ENCODING_ERRâ€”value 5\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"NO_MODIFICATION_ALLOWED_ERRâ€”value 6 \"])]), \" \", _vm._h('tr', [_vm._h('td', [\"INVALID_STATE_ERRâ€”value 7\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"SYNTAX_ERRâ€”value 8\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"INVALID_MODIFICATION_ERRâ€”value 9\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"QUOTA_EXCEEDED_ERRâ€”value 10\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"TYPE_MISMATCH_ERRâ€”value 11\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"PATH_EXISTS_ERRâ€”value 12\"])])])])\n}]}\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 8.build.js","var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = require(\"!!babel-loader!vue-loader/lib/selector?type=script&index=0!./File.vue\")\n\n/* template */\nvar __vue_template__ = require(\"!!vue-loader/lib/template-compiler?id=data-v-3d362f74!vue-loader/lib/selector?type=template&index=0!./File.vue\")\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/File.vue\n// module id = 10\n// module chunks = 8","<template>\n    <div class=\"api\">\n        <h2>File API</h2>\n        <div class=\"api-info\">\n            <h3>File API</h3>\n            <p>JavaScript has always been good at working with strings and numbers, but binary data has never been its strong point.</p>\n            <p>Recently, however, it added a blob data type and interfaces to work with blobs (binary large objects). JavaScript sees a blob as a big chunk of raw data.</p>\n            <p>A blob is usually generated from a file, but not necessarily. Itâ€™s a good alternative to work with data without loading the entire file into memory, and it provides the possibility of processing binary information in small pieces.</p>\n            <p>We use the &lt;input&gt; tag to select files.</p>\n        </div>\n        <pre class=\"api-code\">\n\t&lt;input type=\"file\" name=\"files\" id=\"files\" /&gt;\n\t</pre>\n        <div class=\"api-info\">\n            <h3> Blob Interface (File API)</h3>\n            <p>This interface provides properties and methods to operate with blobs. This interface is inherited by the File Interface.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>slice(start, length, type)</td>\n                <td>This method returns the part of the blob or file indicated by the values in bytes of the start and length attributes.</td>\n            </tr>\n        </table>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>size</td>\n                <td>This property represents the size of the blob or file in bytes.</td>\n            </tr>\n            <tr>\n                <td>type</td>\n                <td>This property represents the media type of the blob or file.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>File Interface (File API)</h3>\n            <p>This interface is an extension of the Blob Interface to process files.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>name</td>\n                <td>This property represents the name of the file.</td>\n            </tr>\n            <tr>\n                <td>type</td>\n                <td>This property represents the media type of the blob or file.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>FileReader Interface (File API)</h3>\n            <p>This interface provides specific methods, properties and events for reading files and blobs into memory.</p>\n        </div>\n        <pre class=\"api-code\">\n\tvar fileReader=new FileReader(); \n\tfileReader.readAsText(file, \"UTF-16\"); \n\tfileReader.onprogress = updateProgress; \n\tfileReader.addEventsListener('load', onLoad, false);\n\t</pre>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>readAsArrayBuffer(file)</td>\n                <td>This method returns a file or blobâ€™s content as an ArrayBuffer.</td>\n            </tr>\n            <tr>\n                <td>readAsBinaryString(file)</td>\n                <td>This method returns a file or blobâ€™s content as a binary string.</td>\n            </tr>\n            <tr>\n                <td>readAsText(file)</td>\n                <td>This method interprets a file or blobâ€™s content and returns it as a text.</td>\n            </tr>\n            <tr>\n                <td>readAsDataURL(file)</td>\n                <td>This method returns a file or blobâ€™s content as a data:url.</td>\n            </tr>\n            <tr>\n                <td>abort()</td>\n                <td>This method aborts the reading process.</td>\n            </tr>\n        </table>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>result</td>\n                <td>This property represents the data returned by the reading methods.</td>\n            </tr>\n        </table>\n        <h4 class=\"api-table-caption\">The Events</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>loadstart</td>\n                <td>This event is fired when the read starts.</td>\n            </tr>\n            <tr>\n                <td>progress</td>\n                <td>This event is fired periodically to report reading status.</td>\n            </tr>\n            <tr>\n                <td>load</td>\n                <td>This event is fired when the reading is complete.</td>\n            </tr>\n            <tr>\n                <td>abort</td>\n                <td>This event is fired when the reading process is aborted.</td>\n            </tr>\n            <tr>\n                <td>error</td>\n                <td>This event is fired in case of failure.</td>\n            </tr>\n            <tr>\n                <td>loadend</td>\n                <td>This event is fired when the request is completed, either in success or failure.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>LocalFileSystem Interface (File API: Directories and System)</h3>\n            <p>This interface is provided to initiate a File System for the application.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>requestFileSystem(type, size, success function, error function)</td>\n                <td>This method requests the initialization of a File System configured according to the value of its attributes. The type attribute can take two values: TEMPORARY or PERSISTENT. The size must be specified in bytes.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>FileSystem Interface (File API: Directories and System)</h3>\n            <p>This interface provides information about the File System.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>name</td>\n                <td>This property represents the name of the File System.</td>\n            </tr>\n            <tr>\n                <td>root</td>\n                <td>This property references the root directory of the File System.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>Entry Interface (File API: Directories and System)</h3>\n            <p>This interface provides methods and properties to process entries (files and directories) in the File System.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>isFile</td>\n                <td>This property is a boolean value indicating whether the entry is a file or not.</td>\n            </tr>\n            <tr>\n                <td>isDirectory</td>\n                <td>This property is a boolean value indicating whether the entry is a directory or not.</td>\n            </tr>\n            <tr>\n                <td>name</td>\n                <td>This property represents the name of the entry.</td>\n            </tr>\n            <tr>\n                <td>fullPath</td>\n                <td>This property represents the full path from the root of the File System to the entry.</td>\n            </tr>\n            <tr>\n                <td>filesystem</td>\n                <td>This property contains a reference to the File System.</td>\n            </tr>\n        </table>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>moveTo(parent, new name, success function, error function)</td>\n                <td>This method moves an entry to a different location. The parent attribute represents the directory in which the entry will be moved. The new name attribute, if specified, changes the name of the entry in the new location.</td>\n            </tr>\n            <tr>\n                <td>copyTo(parent, new name, success function, error function)</td>\n                <td>This method makes a copy of the entry. The parent attribute represents the directory in which the copy of the entry will be created. The new name attribute, if specified, changes the name of the copy.</td>\n            </tr>\n            <tr>\n                <td>remove(success function, error function)</td>\n                <td>This method deletes a file or an empty directory.</td>\n            </tr>\n            <tr>\n                <td>getParent(success function, error function)</td>\n                <td>This method returns the parent DirectoryEntry of the selected entry.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>DirectoryEntry Interface (File API: Directories and System)</h3>\n            <p>This interface provides methods to create and read files and directories.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>createReader()</td>\n                <td>This method creates a DirectoryReader object to read entries.</td>\n            </tr>\n            <tr>\n                <td>getFile(path, options, success function, error function)</td>\n                <td>This method creates or reads the file indicated by the path attribute. The options attribute is set by two flags: create and exclusive. The first one indicates whether the file will be created or not, and exclusive, when it is set to true, forces this method to return an error if the file already exists.</td>\n            </tr>\n            <tr>\n                <td>getDirectory(path, options, success function, error function)</td>\n                <td>This method creates or reads the directory indicated by the path attribute. The options attribute is set by two flags: create and exclusive. The first one indicates whether the directory will be created or not, and exclusive, when it is set to true, forces this method to return an error if the directory already exists</td>\n            </tr>\n            <tr>\n                <td>removeRecursively(success function, error function)</td>\n                <td>This method deletes a directory and all its content.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>DirectoryReader Interface (File API: Directories and System)</h3>\n            <p>This interface provides the alternative to get a list of entries in a specific directory.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>readEntries(success function, error function)</td>\n                <td>This method reads a block of entries from the selected directory. It returns null if no more entries are found.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>FileEntry Interface (File API: Directories and System)</h3>\n            <p>This interface provides methods to get a File object from a specific file and a FileWriter object in order to add content to the file.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>createWriter(success function, error function)</td>\n                <td>This method creates a FileReader object to write content into a file.</td>\n            </tr>\n            <tr>\n                <td>file(success function, error function)</td>\n                <td>This method returns a File object that represents the selected file.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>BlobBuilder Interface (File API: Writer)</h3>\n            <p>This interface provides methods to work with blob objects.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>getBlob(type)</td>\n                <td>This method returns the content of a blob object as a blob.</td>\n            </tr>\n            <tr>\n                <td>append(data)</td>\n                <td>This method appends data to a blob object. The interface provides three append() methods to append data as text, as a blob or as ArrayBuffer.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>FileWriter Interface (File API: Writer)</h3>\n            <p>The FileWriter interface is an expansion of the FileSaver interface. The latter is not described here, but the events listed below are part of it.</p>\n        </div>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>position</td>\n                <td>This property represents the current position in which the next writing will occur.</td>\n            </tr>\n            <tr>\n                <td>length</td>\n                <td>This property represents the length of the file in bytes.</td>\n            </tr>\n        </table>\n        <h4 class=\"api-table-caption\">The Methods</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>write(blob)</td>\n                <td>This method writes content in a file.</td>\n            </tr>\n            <tr>\n                <td>seek(offset)</td>\n                <td>This method sets a new position in which the next writing will occur.</td>\n            </tr>\n            <tr>\n                <td>truncate(size)</td>\n                <td>This method changes the length of the file to the value of the size attribute (in bytes).</td>\n            </tr>\n        </table>\n        <h4 class=\"api-table-caption\">The Events</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>writestart</td>\n                <td>This event is fired when the write starts.</td>\n            </tr>\n            <tr>\n                <td>progress</td>\n                <td>This event is fired periodically to report writing status.</td>\n            </tr>\n            <tr>\n                <td>write</td>\n                <td>This event is fired when the writing is complete.</td>\n            </tr>\n            <tr>\n                <td>abort</td>\n                <td>this event is fired when the writing process is aborted.</td>\n            </tr>\n            <tr>\n                <td>error</td>\n                <td>This event is fired in case of failure.</td>\n            </tr>\n            <tr>\n                <td>writeend</td>\n                <td>This event is fired when the request is completed, either in success or failure.</td>\n            </tr>\n        </table>\n        <div class=\"api-info\">\n            <h3>FileError Interface (File API and extensions)</h3>\n            <p>Several methods in this API return a value through a callback function when the process fails. This value can be compared with the following list to find the corresponding error:</p>\n        </div>\n        <table class=\"api-table\">\n            <tr>\n                <td>NOT_FOUND_ERRâ€”value 1</td>\n            </tr>\n            <tr>\n                <td>SECURITY_ERRâ€”value 2</td>\n            </tr>\n            <tr>\n                <td>ABORT_ERRâ€”value 3</td>\n            </tr>\n            <tr>\n                <td>NOT_READABLE_ERRâ€”value 4</td>\n            </tr>\n            <tr>\n                <td>ENCODING_ERRâ€”value 5</td>\n            </tr>\n            <tr>\n                <td>NO_MODIFICATION_ALLOWED_ERRâ€”value 6 </td>\n            </tr>\n            <tr>\n                <td>INVALID_STATE_ERRâ€”value 7</td>\n            </tr>\n            <tr>\n                <td>SYNTAX_ERRâ€”value 8</td>\n            </tr>\n            <tr>\n                <td>INVALID_MODIFICATION_ERRâ€”value 9</td>\n            </tr>\n            <tr>\n                <td>QUOTA_EXCEEDED_ERRâ€”value 10</td>\n            </tr>\n            <tr>\n                <td>TYPE_MISMATCH_ERRâ€”value 11</td>\n            </tr>\n            <tr>\n                <td>PATH_EXISTS_ERRâ€”value 12</td>\n            </tr>\n        </table>\n    </div>\n</template>\n<script>\nexport default {\n    name: 'file',\n    data() {\n        return {}\n    }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// File.vue?5974b0e1","module.exports={render:function (){var _vm=this;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;\n  return _vm._h('div', {\n    staticClass: \"api\"\n  }, [_vm._h('h2', [\"File API\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"File API\"]), \" \", _vm._h('p', [\"JavaScript has always been good at working with strings and numbers, but binary data has never been its strong point.\"]), \" \", _vm._h('p', [\"Recently, however, it added a blob data type and interfaces to work with blobs (binary large objects). JavaScript sees a blob as a big chunk of raw data.\"]), \" \", _vm._h('p', [\"A blob is usually generated from a file, but not necessarily. Itâ€™s a good alternative to work with data without loading the entire file into memory, and it provides the possibility of processing binary information in small pieces.\"]), \" \", _vm._h('p', [\"We use the <input> tag to select files.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\t<input type=\\\"file\\\" name=\\\"files\\\" id=\\\"files\\\" />\\n\\t\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\" Blob Interface (File API)\"]), \" \", _vm._h('p', [\"This interface provides properties and methods to operate with blobs. This interface is inherited by the File Interface.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"slice(start, length, type)\"]), \" \", _vm._h('td', [\"This method returns the part of the blob or file indicated by the values in bytes of the start and length attributes.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"size\"]), \" \", _vm._h('td', [\"This property represents the size of the blob or file in bytes.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"type\"]), \" \", _vm._h('td', [\"This property represents the media type of the blob or file.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"File Interface (File API)\"]), \" \", _vm._h('p', [\"This interface is an extension of the Blob Interface to process files.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"name\"]), \" \", _vm._h('td', [\"This property represents the name of the file.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"type\"]), \" \", _vm._h('td', [\"This property represents the media type of the blob or file.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileReader Interface (File API)\"]), \" \", _vm._h('p', [\"This interface provides specific methods, properties and events for reading files and blobs into memory.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tvar fileReader=new FileReader(); \\n\\tfileReader.readAsText(file, \\\"UTF-16\\\"); \\n\\tfileReader.onprogress = updateProgress; \\n\\tfileReader.addEventsListener('load', onLoad, false);\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"readAsArrayBuffer(file)\"]), \" \", _vm._h('td', [\"This method returns a file or blobâ€™s content as an ArrayBuffer.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"readAsBinaryString(file)\"]), \" \", _vm._h('td', [\"This method returns a file or blobâ€™s content as a binary string.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"readAsText(file)\"]), \" \", _vm._h('td', [\"This method interprets a file or blobâ€™s content and returns it as a text.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"readAsDataURL(file)\"]), \" \", _vm._h('td', [\"This method returns a file or blobâ€™s content as a data:url.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"abort()\"]), \" \", _vm._h('td', [\"This method aborts the reading process.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"result\"]), \" \", _vm._h('td', [\"This property represents the data returned by the reading methods.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Events\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"loadstart\"]), \" \", _vm._h('td', [\"This event is fired when the read starts.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"progress\"]), \" \", _vm._h('td', [\"This event is fired periodically to report reading status.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"load\"]), \" \", _vm._h('td', [\"This event is fired when the reading is complete.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"abort\"]), \" \", _vm._h('td', [\"This event is fired when the reading process is aborted.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"error\"]), \" \", _vm._h('td', [\"This event is fired in case of failure.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"loadend\"]), \" \", _vm._h('td', [\"This event is fired when the request is completed, either in success or failure.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"LocalFileSystem Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface is provided to initiate a File System for the application.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"requestFileSystem(type, size, success function, error function)\"]), \" \", _vm._h('td', [\"This method requests the initialization of a File System configured according to the value of its attributes. The type attribute can take two values: TEMPORARY or PERSISTENT. The size must be specified in bytes.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileSystem Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides information about the File System.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"name\"]), \" \", _vm._h('td', [\"This property represents the name of the File System.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"root\"]), \" \", _vm._h('td', [\"This property references the root directory of the File System.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Entry Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides methods and properties to process entries (files and directories) in the File System.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"isFile\"]), \" \", _vm._h('td', [\"This property is a boolean value indicating whether the entry is a file or not.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"isDirectory\"]), \" \", _vm._h('td', [\"This property is a boolean value indicating whether the entry is a directory or not.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"name\"]), \" \", _vm._h('td', [\"This property represents the name of the entry.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"fullPath\"]), \" \", _vm._h('td', [\"This property represents the full path from the root of the File System to the entry.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"filesystem\"]), \" \", _vm._h('td', [\"This property contains a reference to the File System.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"moveTo(parent, new name, success function, error function)\"]), \" \", _vm._h('td', [\"This method moves an entry to a different location. The parent attribute represents the directory in which the entry will be moved. The new name attribute, if specified, changes the name of the entry in the new location.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"copyTo(parent, new name, success function, error function)\"]), \" \", _vm._h('td', [\"This method makes a copy of the entry. The parent attribute represents the directory in which the copy of the entry will be created. The new name attribute, if specified, changes the name of the copy.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"remove(success function, error function)\"]), \" \", _vm._h('td', [\"This method deletes a file or an empty directory.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getParent(success function, error function)\"]), \" \", _vm._h('td', [\"This method returns the parent DirectoryEntry of the selected entry.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"DirectoryEntry Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides methods to create and read files and directories.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"createReader()\"]), \" \", _vm._h('td', [\"This method creates a DirectoryReader object to read entries.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getFile(path, options, success function, error function)\"]), \" \", _vm._h('td', [\"This method creates or reads the file indicated by the path attribute. The options attribute is set by two flags: create and exclusive. The first one indicates whether the file will be created or not, and exclusive, when it is set to true, forces this method to return an error if the file already exists.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getDirectory(path, options, success function, error function)\"]), \" \", _vm._h('td', [\"This method creates or reads the directory indicated by the path attribute. The options attribute is set by two flags: create and exclusive. The first one indicates whether the directory will be created or not, and exclusive, when it is set to true, forces this method to return an error if the directory already exists\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"removeRecursively(success function, error function)\"]), \" \", _vm._h('td', [\"This method deletes a directory and all its content.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"DirectoryReader Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides the alternative to get a list of entries in a specific directory.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"readEntries(success function, error function)\"]), \" \", _vm._h('td', [\"This method reads a block of entries from the selected directory. It returns null if no more entries are found.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileEntry Interface (File API: Directories and System)\"]), \" \", _vm._h('p', [\"This interface provides methods to get a File object from a specific file and a FileWriter object in order to add content to the file.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"createWriter(success function, error function)\"]), \" \", _vm._h('td', [\"This method creates a FileReader object to write content into a file.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"file(success function, error function)\"]), \" \", _vm._h('td', [\"This method returns a File object that represents the selected file.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"BlobBuilder Interface (File API: Writer)\"]), \" \", _vm._h('p', [\"This interface provides methods to work with blob objects.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"getBlob(type)\"]), \" \", _vm._h('td', [\"This method returns the content of a blob object as a blob.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"append(data)\"]), \" \", _vm._h('td', [\"This method appends data to a blob object. The interface provides three append() methods to append data as text, as a blob or as ArrayBuffer.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileWriter Interface (File API: Writer)\"]), \" \", _vm._h('p', [\"The FileWriter interface is an expansion of the FileSaver interface. The latter is not described here, but the events listed below are part of it.\"])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"position\"]), \" \", _vm._h('td', [\"This property represents the current position in which the next writing will occur.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"length\"]), \" \", _vm._h('td', [\"This property represents the length of the file in bytes.\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"write(blob)\"]), \" \", _vm._h('td', [\"This method writes content in a file.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"seek(offset)\"]), \" \", _vm._h('td', [\"This method sets a new position in which the next writing will occur.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"truncate(size)\"]), \" \", _vm._h('td', [\"This method changes the length of the file to the value of the size attribute (in bytes).\"])])]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Events\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"writestart\"]), \" \", _vm._h('td', [\"This event is fired when the write starts.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"progress\"]), \" \", _vm._h('td', [\"This event is fired periodically to report writing status.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"write\"]), \" \", _vm._h('td', [\"This event is fired when the writing is complete.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"abort\"]), \" \", _vm._h('td', [\"this event is fired when the writing process is aborted.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"error\"]), \" \", _vm._h('td', [\"This event is fired in case of failure.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"writeend\"]), \" \", _vm._h('td', [\"This event is fired when the request is completed, either in success or failure.\"])])]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"FileError Interface (File API and extensions)\"]), \" \", _vm._h('p', [\"Several methods in this API return a value through a callback function when the process fails. This value can be compared with the following list to find the corresponding error:\"])]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"NOT_FOUND_ERRâ€”value 1\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"SECURITY_ERRâ€”value 2\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"ABORT_ERRâ€”value 3\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"NOT_READABLE_ERRâ€”value 4\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"ENCODING_ERRâ€”value 5\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"NO_MODIFICATION_ALLOWED_ERRâ€”value 6 \"])]), \" \", _vm._h('tr', [_vm._h('td', [\"INVALID_STATE_ERRâ€”value 7\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"SYNTAX_ERRâ€”value 8\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"INVALID_MODIFICATION_ERRâ€”value 9\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"QUOTA_EXCEEDED_ERRâ€”value 10\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"TYPE_MISMATCH_ERRâ€”value 11\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"PATH_EXISTS_ERRâ€”value 12\"])])])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-3d362f74!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/File.vue\n// module id = 56\n// module chunks = 8"],"sourceRoot":""}