{"version":3,"sources":["webpack:///9.build.js","webpack:///DragAndDrop.vue","webpack:///./src/components/DragAndDrop.vue?3cf4","webpack:///./src/components/DragAndDrop.vue"],"names":["webpackJsonp","42","module","exports","__webpack_require__","name","data","63","render","_vm","this","_m","staticRenderFns","_h","staticClass","9","__vue_exports__","__vue_options__","__vue_template__","default","options"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAASC,EAAQC,EAASC,GAEhC,YC6HAD,GAAA,SDOEE,KCLF,cDMEC,KAAM,WACJ,YAMEC,GACA,SAASL,EAAQC,GElJvBD,EAAAC,SAAgBK,OAAA,WAAmB,GAAAC,GAAAC,IACnC,OAAAD,GAAAE,GAAA,IACCC,iBAAA,WAA+B,GAAAH,GAAAC,IAChC,OAAAD,GAAAI,GAAA,OACAC,YAAA,QACGL,EAAAI,GAAA,gCAAAJ,EAAAI,GAAA,OACHC,YAAA,aACGL,EAAAI,GAAA,gCAAAJ,EAAAI,GAAA,mQAAAJ,EAAAI,GAAA,OACHC,YAAA,aACG,oEAAAL,EAAAI,GAAA,OACHC,YAAA,aACGL,EAAAI,GAAA,sCAAAJ,EAAAI,GAAA,8GAAAJ,EAAAI,GAAA,OACHC,YAAA,aACG,uQAAiQ,IAAAL,EAAAI,GAAA,MACpQC,YAAA,sBACG,oBAAAL,EAAAI,GAAA,SACHC,YAAA,cACGL,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,kCAAAJ,EAAAI,GAAA,yMAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,4BAAAJ,EAAAI,GAAA,0GAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,8BAAAJ,EAAAI,GAAA,qEAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,0CAAAJ,EAAAI,GAAA,mKAAAJ,EAAAI,GAAA,OACHC,YAAA,aACG,8QAAmQ,IAAAL,EAAAI,GAAA,OACtQC,YAAA,aACG,mGAAwF,IAAAL,EAAAI,GAAA,MAC3FC,YAAA,sBACG,uBAAAL,EAAAI,GAAA,SACHC,YAAA,cACGL,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,oBAAAJ,EAAAI,GAAA,8FAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,oBAAAJ,EAAAI,GAAA,wGAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,yBAAAJ,EAAAI,GAAA,wLAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,4BAAAJ,EAAAI,GAAA,uOAAAJ,EAAAI,GAAA,OACHC,YAAA,aACG,qXAAgX,IAAAL,EAAAI,GAAA,MACnXC,YAAA,sBACG,mBAAAL,EAAAI,GAAA,SACHC,YAAA,cACGL,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,wBAAAJ,EAAAI,GAAA,2JAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,mBAAAJ,EAAAI,GAAA,oIAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,sBAAAJ,EAAAI,GAAA,8LAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,wBAAAJ,EAAAI,GAAA,2IAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,uBAAAJ,EAAAI,GAAA,4EAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,mBAAAJ,EAAAI,GAAA,iGAAAJ,EAAAI,GAAA,MAAAJ,EAAAI,GAAA,wBAAAJ,EAAAI,GAAA,8FAAAJ,EAAAI,GAAA,OACHC,YAAA,aACG,qOFyJGC,EACA,SAASb,EAAQC,EAASC,GG3LhC,GAAAY,GAAAC,CAIAD,GAAAZ,EAAA,GAGA,IAAAc,GAAAd,EAAA,GACAa,GAAAD,QAEA,gBAAAA,GAAAG,SACA,kBAAAH,GAAAG,UAEAF,EAAAD,IAAAG,SAEA,kBAAAF,KACAA,IAAAG,SAGAH,EAAAT,OAAAU,EAAAV,OACAS,EAAAL,gBAAAM,EAAAN,gBAEAV,EAAAC,QAAAa","file":"9.build.js","sourcesContent":["webpackJsonp([9],{\n\n/***/ 42:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ exports[\"default\"] = {\n  name: 'draganddrop',\n  data: function data() {\n    return {};\n  }\n};\n\n/***/ },\n\n/***/ 63:\n/***/ function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;\n  return _vm._h('div', {\n    staticClass: \"api\"\n  }, [_vm._h('h2', [\"Drag and Drop API\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Drag and Drop API\"]), \" \", _vm._h('p', [\"HTML5 adds support for drag and drop. Making an object draggable is simple. Set the draggable=true attribute on the element you want to make moveable. Just about anything can be drag-enabled, including images, links, files, or other DOM nodes.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n \\t<div class=\\\"drag\\\" draggable=\\\"true\\\"><b>B</b></div>\\n\\t \"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"The dataTransfer object\"]), \" \", _vm._h('p', [\"dataTransfer - This is the object that will hold the information in a drag and drop operation.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tdrop=document.getElementById('drop');\\n\\tdrop.addEventListener('drop', dropped, false);\\n\\tfunction dropped(e){ \\n\\t\\te.preventDefault(); \\n\\t\\tvar files=e.dataTransfer.files; \\n\\t\\te.dataTransfer.setData('Title',’<div class=”draged”></div>’); \\n\\t}\\n \\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"setData(type, data)\"]), \" \", _vm._h('td', [\"This method is used to prepare the data to be sent when a dragstart event is fired. The type attribute can be any regular data type (like text/plain or text/html) or a customized type.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getData(type)\"]), \" \", _vm._h('td', [\"This method returns the data of the type specified. It’s used when a drop event is fired.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"clearData(type)\"]), \" \", _vm._h('td', [\"This method removes the data for the type specified.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"setDragImage(element, x, y)\"]), \" \", _vm._h('td', [\"This method replaces the default thumbnail created by the browser with a customized image and sets its position relative to the mouse’s pointer.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tdrop=document.getElementById('drop'); \\n\\tdrop.addEventListener('drop', dropped, false); \\n\\tfunction dropped(e){ \\n\\t\\te.preventDefault(); \\n\\t\\tvar files=e.dataTransfer.files; \\n\\t\\te.dataTransfer.setData('Title',’<div class=”draged”></div>’); \\n\\t}\\n        \"]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\te.dataTransfer.getData('Text'); \\n\\te.dataTransfer.setDragImage(e.target, 0, 0);\\n        \"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"types\"]), \" \", _vm._h('td', [\"This property returns an array with all the types set in the dragstart event.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"files\"]), \" \", _vm._h('td', [\"This property returns an array with information about the files that have been dragged.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dropEffect\"]), \" \", _vm._h('td', [\"This property returns the type of operation currently selected. It can also be set to change the selected operation. The possible values are none, copy, link and move.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"effectAllowed\"]), \" \", _vm._h('td', [\"This property returns the types of operations that are allowed. It can be set to change the operations allowed. The possible values are none, copy, copyLink, copyMove, link, linkMove, move, all and uninitialized.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tdrop=document.getElementById('drop'); \\n\\tdrop.addEventListener('drop', dropped, false); \\n\\tfunction dropped(e){ \\n\\t    e.preventDefault(); \\n\\t    var files=e.dataTransfer.files; \\n\\t}\\n\\n\\tfunction dragStartEvent(e) { \\n\\t    e.dataTransfer.effectAllowed=\\\"copy\\\"; \\n\\t}\\n\\n \\tfunction dragOverEvent(e) { \\n\\t    e.dataTransfer.dropEffect = \\\"copy\\\"; \\n\\t}\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Events\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"dragstart\"]), \" \", _vm._h('td', [\"This event is fired the moment the drag operation starts. The data associated with the source element is set at this moment in the system.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drag\"]), \" \", _vm._h('td', [\"This event is similar to the mousemove event, except that it’s fired during a drag operation by the source element.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dragend\"]), \" \", _vm._h('td', [\"When the drag operation is over, whether it was successful or not, this event is fired from the source. And here are the events fired by the target during the same operation\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dragenter\"]), \" \", _vm._h('td', [\"When the mouse’s pointer enters inside the area of a possible target element during a drag operation, this event is fired.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dragover\"]), \" \", _vm._h('td', [\"Triggered when a dragged element moves within the drop zone\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drop\"]), \" \", _vm._h('td', [\"When the drop occurs during a drag operation, this event is fired by the target.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dragleave\"]), \" \", _vm._h('td', [\"Triggered when a dragged element leaves the drop zone without being dropped\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tdrop=document.getElementById('drop'); \\n\\tdrop.addEventListener('drop', dropped, false); \\n\\tdrop.addEventListener('dragleave', onDragLeave, false); \\n\\tdrop.addEventListener('dragenter', onDragEnter, false);\\n    \"])])\n}]}\n\n/***/ },\n\n/***/ 9:\n/***/ function(module, exports, __webpack_require__) {\n\nvar __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(42)\n\n/* template */\nvar __vue_template__ = __webpack_require__(63)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 9.build.js","<template>\n  <div class=\"api\">\n  \t<h2>Drag and Drop API</h2>\n\t  <div class=\"api-info\">\n\t  \t<h3>Drag and Drop API</h3>\n\t  \t<p>HTML5 adds support for drag and drop. Making an object draggable is simple. Set the draggable=true attribute on the element you want to make moveable. Just about anything can be drag-enabled, including images, links, files, or other DOM nodes.</p>\n\t  </div>\n\t <pre class=\"api-code\">\n \t&lt;div class=\"drag\" draggable=\"true\"&gt;&lt;b&gt;B&lt;/b&gt;&lt;/div&gt;\n\t </pre>\n\t <div class=\"api-info\">\n\t \t<h3>The dataTransfer object</h3>\n\t \t<p>dataTransfer - This is the object that will hold the information in a drag and drop operation.</p>\n\t </div>\n\t <pre class=\"api-code\">\n\tdrop=document.getElementById('drop');\n\tdrop.addEventListener('drop', dropped, false);\n\tfunction dropped(e){ \n\t\te.preventDefault(); \n\t\tvar files=e.dataTransfer.files; \n\t\te.dataTransfer.setData('Title',’&lt;div class=”draged”&gt;&lt;/div&gt;’); \n\t}\n \t</pre>\n    <h4 class=\"api-table-caption\">The Methods</h4>\n    <table class=\"api-table\">\n            <tr>\n                <td>setData(type, data)</td>\n                <td>This method is used to prepare the data to be sent when a dragstart event is fired. The type attribute can be any regular data type (like text/plain or text/html) or a customized type.</td>\n            </tr>\n            <tr>\n                <td>getData(type)</td>\n                <td>This method returns the data of the type specified. It’s used when a drop event is fired.</td>\n            </tr>\n        \t<tr>\n                <td>clearData(type)</td>\n                <td>This method removes the data for the type specified.</td>\n            </tr>\n            <tr>\n                <td>setDragImage(element, x, y)</td>\n                <td>This method replaces the default thumbnail created by the browser with a customized image and sets its position relative to the mouse’s pointer.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tdrop=document.getElementById('drop'); \n\tdrop.addEventListener('drop', dropped, false); \n\tfunction dropped(e){ \n\t\te.preventDefault(); \n\t\tvar files=e.dataTransfer.files; \n\t\te.dataTransfer.setData('Title',’&lt;div class=”draged”&gt;&lt;/div&gt;’); \n\t}\n        </pre>\n         <pre class=\"api-code\">\n\te.dataTransfer.getData('Text'); \n\te.dataTransfer.setDragImage(e.target, 0, 0);\n        </pre>\n        <h4 class=\"api-table-caption\">The Properties</h4>\n        <table class=\"api-table\">\n            <tr>\n                <td>types</td>\n                <td>This property returns an array with all the types set in the dragstart event.</td>\n            </tr>\n            <tr>\n                <td>files</td>\n                <td>This property returns an array with information about the files that have been dragged.</td>\n            </tr>\n        \t<tr>\n                <td>dropEffect</td>\n                <td>This property returns the type of operation currently selected. It can also be set to change the selected operation. The possible values are none, copy, link and move.</td>\n            </tr>\n            <tr>\n                <td>effectAllowed</td>\n                <td>This property returns the types of operations that are allowed. It can be set to change the operations allowed. The possible values are none, copy, copyLink, copyMove, link, linkMove, move, all and uninitialized.</td>\n            </tr>\n        </table>\n        <pre class=\"api-code\">\n\tdrop=document.getElementById('drop'); \n\tdrop.addEventListener('drop', dropped, false); \n\tfunction dropped(e){ \n\t    e.preventDefault(); \n\t    var files=e.dataTransfer.files; \n\t}\n\n\tfunction dragStartEvent(e) { \n\t    e.dataTransfer.effectAllowed=\"copy\"; \n\t}\n\n \tfunction dragOverEvent(e) { \n\t    e.dataTransfer.dropEffect = \"copy\"; \n\t}\n\t</pre>\n\t<h4 class=\"api-table-caption\">The Events</h4>\n    <table class=\"api-table\">\n        <tr>\n            <td>dragstart</td>\n            <td>This event is fired the moment the drag operation starts. The data associated with the source element is set at this moment in the system.</td>\n        </tr>\n        <tr>\n            <td>drag</td>\n            <td>This event is similar to the mousemove event, except that it’s fired during a drag operation by the source element.</td>\n        </tr>\n     \t<tr>\n            <td>dragend</td>\n            <td>When the drag operation is over, whether it was successful or not, this event is fired from the source. And here are the events fired by the target during the same operation</td>\n        </tr>\n        <tr>\n            <td>dragenter</td>\n            <td>When the mouse’s pointer enters inside the area of a possible target element during a drag operation, this event is fired.</td>\n        </tr>\n        <tr>\n            <td>dragover</td>\n            <td>Triggered when a dragged element moves within the drop zone</td>\n        </tr>\n        <tr>\n            <td>drop</td>\n            <td>When the drop occurs during a drag operation, this event is fired by the target.</td>\n        </tr>\n        <tr>\n            <td>dragleave</td>\n            <td>Triggered when a dragged element leaves the drop zone without being dropped</td>\n        </tr>\n    </table>\n    <pre class=\"api-code\">\n\tdrop=document.getElementById('drop'); \n\tdrop.addEventListener('drop', dropped, false); \n\tdrop.addEventListener('dragleave', onDragLeave, false); \n\tdrop.addEventListener('dragenter', onDragEnter, false);\n    </pre>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'draganddrop',\n  data () {\n  \treturn {}\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// DragAndDrop.vue?ef85d27a","module.exports={render:function (){var _vm=this;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;\n  return _vm._h('div', {\n    staticClass: \"api\"\n  }, [_vm._h('h2', [\"Drag and Drop API\"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"Drag and Drop API\"]), \" \", _vm._h('p', [\"HTML5 adds support for drag and drop. Making an object draggable is simple. Set the draggable=true attribute on the element you want to make moveable. Just about anything can be drag-enabled, including images, links, files, or other DOM nodes.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n \\t<div class=\\\"drag\\\" draggable=\\\"true\\\"><b>B</b></div>\\n\\t \"]), \" \", _vm._h('div', {\n    staticClass: \"api-info\"\n  }, [_vm._h('h3', [\"The dataTransfer object\"]), \" \", _vm._h('p', [\"dataTransfer - This is the object that will hold the information in a drag and drop operation.\"])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tdrop=document.getElementById('drop');\\n\\tdrop.addEventListener('drop', dropped, false);\\n\\tfunction dropped(e){ \\n\\t\\te.preventDefault(); \\n\\t\\tvar files=e.dataTransfer.files; \\n\\t\\te.dataTransfer.setData('Title',’<div class=”draged”></div>’); \\n\\t}\\n \\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Methods\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"setData(type, data)\"]), \" \", _vm._h('td', [\"This method is used to prepare the data to be sent when a dragstart event is fired. The type attribute can be any regular data type (like text/plain or text/html) or a customized type.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"getData(type)\"]), \" \", _vm._h('td', [\"This method returns the data of the type specified. It’s used when a drop event is fired.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"clearData(type)\"]), \" \", _vm._h('td', [\"This method removes the data for the type specified.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"setDragImage(element, x, y)\"]), \" \", _vm._h('td', [\"This method replaces the default thumbnail created by the browser with a customized image and sets its position relative to the mouse’s pointer.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tdrop=document.getElementById('drop'); \\n\\tdrop.addEventListener('drop', dropped, false); \\n\\tfunction dropped(e){ \\n\\t\\te.preventDefault(); \\n\\t\\tvar files=e.dataTransfer.files; \\n\\t\\te.dataTransfer.setData('Title',’<div class=”draged”></div>’); \\n\\t}\\n        \"]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\te.dataTransfer.getData('Text'); \\n\\te.dataTransfer.setDragImage(e.target, 0, 0);\\n        \"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Properties\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"types\"]), \" \", _vm._h('td', [\"This property returns an array with all the types set in the dragstart event.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"files\"]), \" \", _vm._h('td', [\"This property returns an array with information about the files that have been dragged.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dropEffect\"]), \" \", _vm._h('td', [\"This property returns the type of operation currently selected. It can also be set to change the selected operation. The possible values are none, copy, link and move.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"effectAllowed\"]), \" \", _vm._h('td', [\"This property returns the types of operations that are allowed. It can be set to change the operations allowed. The possible values are none, copy, copyLink, copyMove, link, linkMove, move, all and uninitialized.\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tdrop=document.getElementById('drop'); \\n\\tdrop.addEventListener('drop', dropped, false); \\n\\tfunction dropped(e){ \\n\\t    e.preventDefault(); \\n\\t    var files=e.dataTransfer.files; \\n\\t}\\n\\n\\tfunction dragStartEvent(e) { \\n\\t    e.dataTransfer.effectAllowed=\\\"copy\\\"; \\n\\t}\\n\\n \\tfunction dragOverEvent(e) { \\n\\t    e.dataTransfer.dropEffect = \\\"copy\\\"; \\n\\t}\\n\\t\"]), \" \", _vm._h('h4', {\n    staticClass: \"api-table-caption\"\n  }, [\"The Events\"]), \" \", _vm._h('table', {\n    staticClass: \"api-table\"\n  }, [_vm._h('tr', [_vm._h('td', [\"dragstart\"]), \" \", _vm._h('td', [\"This event is fired the moment the drag operation starts. The data associated with the source element is set at this moment in the system.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drag\"]), \" \", _vm._h('td', [\"This event is similar to the mousemove event, except that it’s fired during a drag operation by the source element.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dragend\"]), \" \", _vm._h('td', [\"When the drag operation is over, whether it was successful or not, this event is fired from the source. And here are the events fired by the target during the same operation\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dragenter\"]), \" \", _vm._h('td', [\"When the mouse’s pointer enters inside the area of a possible target element during a drag operation, this event is fired.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dragover\"]), \" \", _vm._h('td', [\"Triggered when a dragged element moves within the drop zone\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"drop\"]), \" \", _vm._h('td', [\"When the drop occurs during a drag operation, this event is fired by the target.\"])]), \" \", _vm._h('tr', [_vm._h('td', [\"dragleave\"]), \" \", _vm._h('td', [\"Triggered when a dragged element leaves the drop zone without being dropped\"])])]), \" \", _vm._h('pre', {\n    staticClass: \"api-code\"\n  }, [\"\\n\\tdrop=document.getElementById('drop'); \\n\\tdrop.addEventListener('drop', dropped, false); \\n\\tdrop.addEventListener('dragleave', onDragLeave, false); \\n\\tdrop.addEventListener('dragenter', onDragEnter, false);\\n    \"])])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-e906fe90!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/DragAndDrop.vue\n// module id = 63\n// module chunks = 9","var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = require(\"!!babel-loader!vue-loader/lib/selector?type=script&index=0!./DragAndDrop.vue\")\n\n/* template */\nvar __vue_template__ = require(\"!!vue-loader/lib/template-compiler?id=data-v-e906fe90!vue-loader/lib/selector?type=template&index=0!./DragAndDrop.vue\")\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/DragAndDrop.vue\n// module id = 9\n// module chunks = 9"],"sourceRoot":""}